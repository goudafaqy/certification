<?php

namespace App\Http\Repositories\Eloquent;

use App\Http\Interfaces\Eloquent\QuestionnaireEloquent;
use App\Models\Questionnaire;
use App\Models\QuestionnaireAnswer;
use App\Models\QuestionnaireQuestion;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;


class QuestionnaireRepo extends Repository implements QuestionnaireEloquent
{
    public function __construct()
    {
        parent::__construct(new Questionnaire());
    }

    public function getBy($AttributeName, $AttributeValue)
    {
        return parent::getBy($AttributeName, $AttributeValue); // TODO: Change the autogenerated stub
    }

    public function saveQuestionnaire($data, $user_id, $type, $course_id = NULL)
    {

        try {
            DB::beginTransaction();

            $model = new Questionnaire();
            $model->name = $data['name'];
            $model->publish_date = $data['publish_date'];
            $model->details = isset($data['details']) ? $data['details'] : "";
            $model->type = $type;
            $model->course_id = $course_id;
            $model->user_id = $user_id;

            $save = $model->save();
            if (!$save) throw new \Exception("Fail so Save");

            foreach ($data['questions'] as $question) {

                $quest = new QuestionnaireQuestion();
                $quest->questionnaire_id = $model->id;
                $quest->type = $question['type'];
                $quest->question = $question['question'];
                if ($question['type'] == 'NM') {
                    $quest->min_num = $question['min_num'];
                    $quest->max_num = $question['max_num'];
                } elseif ($question['type'] == 'SC') {
                    $quest->choices = $question['sc'];
                } elseif ($question['type'] == 'MC') {
                    $quest->choices = $question['mc'];
                }

                $save = $quest->save();
                if (!$save) throw new \Exception("Fail so Save");
            }

            DB::commit();
            return $model;
        } catch (\Throwable $e) {
            DB::rollBack();
            return false;
        }

    }

    public function updateQuestionnaire($data, $quest_id)
    {
        try {
            DB::beginTransaction();

            $model = Questionnaire::find($quest_id);
            if (!$model) throw new \Exception("Fail so Save");
            $model->name = $data['name'];
            $model->publish_date = $data['publish_date'];
            $model->details = isset($data['details']) ? $data['details'] : $model->details;

            $save = $model->save();
            if (!$save) throw new \Exception("Fail so Save");

            $model->questions()->delete();
            foreach ($data['questions'] as $question) {

                $quest = new QuestionnaireQuestion();

                $quest->questionnaire_id = $model->id;
                $quest->type = $question['type'];
                $quest->question = $question['question'];
                if ($question['type'] == 'NM') {
                    $quest->min_num = $question['min_num'];
                    $quest->max_num = $question['max_num'];
                } elseif ($question['type'] == 'SC') {
                    $quest->choices = $question['sc'];
                } elseif ($question['type'] == 'MC') {
                    $quest->choices = $question['mc'];
                }

                $save = $quest->save();
                if (!$save) throw new \Exception("Fail so Save");
            }

            DB::commit();
            return $model;
        } catch (\Throwable $e) {
            DB::rollBack();
            return false;
        }

    }


    public function saveUserAnswers($data, $quest_id)
    {

        try {
            DB::beginTransaction();

            $model = Questionnaire::find($quest_id);
            if (!$model) throw new \Exception("Fail so Save");

            $model->answers()->where('user_id', Auth::user()->id)->delete();

            foreach ($data['answers'] as $question_id => $answer) {

                $questAnswer = new QuestionnaireAnswer();
                $questAnswer->user_id = Auth::user()->id;
                $questAnswer->questionnaire_id = $quest_id;
                $questAnswer->question_id = $question_id;
                $questAnswer->answer = $questAnswer->question->type == 'MC' ? json_encode($answer) : $answer;

                $questAnswer->save();
            }
            DB::commit();
            return $model;
        } catch (\Throwable $e) {
            DB::rollBack();
            return false;
        }
    }
}
